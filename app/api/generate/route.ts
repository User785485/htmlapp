import { NextRequest, NextResponse } from 'next/server';
import { ClientData, GenerationResult, DocumentType } from '@/lib/types';
import { SupabaseService } from '@/lib/supabase-client';
import { DocumentGenerator } from '@/lib/document-generator';
import { SupabaseStoragePublisher } from '@/lib/supabase-storage-publisher';
// import { VercelPublisher } from '@/lib/vercel-publisher'; // M√©thode pr√©c√©dente de publication
// import { GitHubPublisher } from '@/lib/github-publisher'; // Ancienne m√©thode de publication

// Initialiser les services
let templatesLoaded = false;

export async function POST(request: NextRequest) {
  console.log('API generate: D√©but de la requ√™te');
  try {
    const { client }: { client: ClientData } = await request.json();
    console.log('API generate: Donn√©es client re√ßues', { email: client.email, prenom: client.prenom, nom: client.nom });
    
    // Charger les templates si ce n'est pas d√©j√† fait
    if (!templatesLoaded) {
      console.log('API generate: Chargement des templates');
      try {
        await DocumentGenerator.loadTemplates();
        templatesLoaded = true;
        console.log('API generate: Templates charg√©s avec succ√®s');
      } catch (templateError) {
        console.error('API generate: Erreur lors du chargement des templates', templateError);
        throw templateError;
      }
    }
    
    // V√©rifier si le client existe d√©j√†
    console.log('API generate: V√©rification si le client existe dans Supabase', { email: client.email });
    let existingClient;
    try {
      existingClient = await SupabaseService.checkClientExists(client.email);
      console.log('API generate: R√©sultat de la v√©rification client', { exists: !!existingClient });
    } catch (supabaseError) {
      console.error('API generate: Erreur lors de la v√©rification du client dans Supabase', supabaseError);
      throw supabaseError;
    }
    
    const result: GenerationResult = {
      client_email: client.email,
      success: true,
      documents: {}
    };
    
    // Si le client existe, r√©cup√©rer les URLs existantes
    if (existingClient) {
      console.log(`Client ${client.email} existe d√©j√†`);
      
      if (existingClient.vente_url) {
        result.documents.vente = {
          url: existingClient.vente_url,
          generated: false
        };
      }
      
      if (existingClient.compte_rendu_url) {
        result.documents['compte-rendu'] = {
          url: existingClient.compte_rendu_url,
          generated: false
        };
      }
      
      if (existingClient.onboarding_url) {
        result.documents.onboarding = {
          url: existingClient.onboarding_url,
          generated: false
        };
      }
      
      // Si tous les documents existent d√©j√†, retourner le r√©sultat
      if (existingClient.vente_url && existingClient.compte_rendu_url && existingClient.onboarding_url) {
        return NextResponse.json(result);
      }
    }
    
    // G√©n√©rer les documents manquants
    console.log('API generate: D√©termination des documents √† g√©n√©rer');
    const documentsToGenerate: DocumentType[] = [];
    if (!existingClient?.vente_url) documentsToGenerate.push('vente');
    if (!existingClient?.compte_rendu_url) documentsToGenerate.push('compte-rendu');
    if (!existingClient?.onboarding_url) documentsToGenerate.push('onboarding');
    
    console.log('API generate: Documents √† g√©n√©rer', documentsToGenerate);
    
    const generatedDocuments: Record<string, { content: string; filename: string }> = {};
    
    try {
      for (const type of documentsToGenerate) {
        console.log(`API generate: G√©n√©ration du document de type ${type}`);
        const content = DocumentGenerator.generateDocument(client, type);
        const filename = DocumentGenerator.generateFileName(client, type);
        generatedDocuments[type] = { content, filename };
        console.log(`API generate: Document ${type} g√©n√©r√© avec succ√®s`, { filename });
      }
    } catch (genError) {
      console.error('API generate: Erreur lors de la g√©n√©ration des documents', genError);
      throw genError;
    }
    
    // Publier sur Supabase Storage et servir via API Route
    console.log('üí•üí•üí• API generate: SOLUTION D\'URGENCE - FORCER LES URLs vers my-muqabala.fr üí•üí•üí•');
    console.log('üî¥ LOGS D√âTAILL√âS POUR D√âBOGAGE üî¥');
    console.log('Process env:', { 
      SITE_BASE_URL: process.env.SITE_BASE_URL,
      NODE_ENV: process.env.NODE_ENV,
      VERCEL_ENV: process.env.VERCEL_ENV,
      VERCEL_URL: process.env.VERCEL_URL
    });
    
    let publishedUrls: Record<DocumentType, string> = {} as Record<DocumentType, string>;
    try {
      // Utiliser Supabase pour stocker les documents
      console.log('üî¥ DIAGNOSTIC: Initialisation de SupabaseStoragePublisher');
      const publisher = new SupabaseStoragePublisher();
      console.log('üî¥ DIAGNOSTIC: SupabaseStoragePublisher initialis√© avec succ√®s');
      console.log('üåüüåüüåü DIAGNOSTIC - FORCAGE des URLs vers my-muqabala.fr');
      console.log('üî¥ Documents g√©n√©r√©s disponibles:', Object.keys(generatedDocuments));
      
      // Publier chaque document avec Supabase
      console.log('üî¥ D√âBUT DE LA BOUCLE DE PUBLICATION DES DOCUMENTS');
      
      for (const [type, doc] of Object.entries(generatedDocuments)) {
        console.log(`üî¥ DIAGNOSTIC - Publication du document de type: ${type}`);
        const docInfo = doc as { content: string; filename: string };
        const path = `${type}/${docInfo.filename}`;
        
        console.log(`üî¥ DIAGNOSTIC - Chemin du fichier: ${path}`);
        console.log(`üî¥ DIAGNOSTIC - Taille du contenu: ${docInfo.content.length} octets`);
        
        try {
          // Stocker dans Supabase Storage
          console.log(`üî¥ DIAGNOSTIC - Tentative de publication dans Supabase: ${path}`);
          const supabaseUrl = await publisher.publishFile(path, docInfo.content);
          console.log(`üî¥ DIAGNOSTIC - URL Supabase re√ßue: ${supabaseUrl}`);
          
          // FORCER l'URL vers my-muqabala.fr ind√©pendamment de ce que retourne la m√©thode de publication
          const forcedUrl = `https://my-muqabala.fr/api/documents/${path}`;
          publishedUrls[type as DocumentType] = forcedUrl;
          
          console.log(`üî¥ DIAGNOSTIC - URL FORC√âE pour ${type}: ${forcedUrl}`);
          console.log(`üî¥ DIAGNOSTIC - Comparaison - URL Supabase: ${supabaseUrl} vs URL forc√©e: ${forcedUrl}`);
        } catch (error) {
          console.error(`üî¥ ERREUR lors de la publication du document ${type}:`, error);
          // Continuer malgr√© l'erreur pour les autres documents
          continue;
        }
      }
      
      console.log('API generate: Publication r√©ussie avec URLs FORC√âES vers my-muqabala.fr', publishedUrls);
    } catch (publishError) {
      console.error('API generate: Erreur lors de la publication des documents', publishError);
      throw publishError;
    }
    
    // Pr√©parer les donn√©es pour Supabase
    console.log('API generate: Pr√©paration des donn√©es pour Supabase');
    const now = new Date();
    
    console.log('API generate: Pr√©paration des donn√©es s√©curis√©es pour Supabase');
    
    // Structure de donn√©es pour Supabase - Toutes les colonnes existent maintenant dans la table
    console.log('API generate: Pr√©paration des donn√©es pour Supabase avec toutes les colonnes');
    
    // Structure de donn√©es pour l'upsert (insertion ou mise √† jour)
    const supabaseData = {
      client_email: client.email,
      client_phone: client.telephone,  // Cette colonne existe maintenant
      client_name: `${client.prenom} ${client.nom}`,
      raw_data: client,  // Stockage des donn√©es brutes du client
      
      // Ajouter toutes les URLs et dates de g√©n√©ration
      ...(publishedUrls.vente && {
        vente_url: publishedUrls.vente,
        vente_generated_at: now
      }),
      
      ...(publishedUrls['compte-rendu'] && {
        compte_rendu_url: publishedUrls['compte-rendu'],
        compte_rendu_generated_at: now
      }),
      
      ...(publishedUrls.onboarding && {
        onboarding_url: publishedUrls.onboarding,
        onboarding_generated_at: now
      })
    };
    
    // Logger les donn√©es pr√©par√©es pour v√©rification
    console.log('API generate: D√©tails des donn√©es pr√©par√©es', {
      email: supabaseData.client_email,
      hasVente: !!publishedUrls.vente,
      hasCompteRendu: !!publishedUrls['compte-rendu'],
      hasOnboarding: !!publishedUrls.onboarding,
      donn√©esStocku00e9es: Object.keys(supabaseData).length
    });
    
    // Sauvegarder dans Supabase avec la m√©thode originale
    console.log('API generate: Sauvegarde des donn√©es dans Supabase');
    try {
      await SupabaseService.upsertClient(supabaseData);
      console.log('API generate: Sauvegarde Supabase r√©ussie');
      
      // Loguer les d√©tails de la sauvegarde pour d√©bogage
      console.log('API generate: D√©tails des donn√©es sauvegard√©es', {
        email: supabaseData.client_email,
        venteUrl: supabaseData.vente_url,
        compteRenduUrl: supabaseData.compte_rendu_url,
        onboardingUrl: supabaseData.onboarding_url
      });
    } catch (saveError) {
      console.error('API generate: Erreur lors de la sauvegarde dans Supabase', saveError);
      throw saveError;
    }
    
    // Pr√©parer le r√©sultat
    for (const [type, url] of Object.entries(publishedUrls)) {
      result.documents[type as DocumentType] = {
        url,
        generated: true
      };
    }
    
    // Ajouter les URLs existantes au r√©sultat
    if (existingClient) {
      if (existingClient.vente_url && !result.documents.vente) {
        result.documents.vente = {
          url: existingClient.vente_url,
          generated: false
        };
      }
      if (existingClient.compte_rendu_url && !result.documents['compte-rendu']) {
        result.documents['compte-rendu'] = {
          url: existingClient.compte_rendu_url,
          generated: false
        };
      }
      if (existingClient.onboarding_url && !result.documents.onboarding) {
        result.documents.onboarding = {
          url: existingClient.onboarding_url,
          generated: false
        };
      }
    }
    
    return NextResponse.json(result);
    
  } catch (error) {
    console.error('API generate: Erreur principale:', error);
    let errorMessage = 'Erreur inconnue';
    
    if (error instanceof Error) {
      errorMessage = error.message;
      console.error('API generate: Stack trace:', error.stack);
    }
    
    // Si l'erreur vient d'une r√©ponse ou contient un message d√©taill√©
    if (typeof error === 'object' && error !== null) {
      console.error('API generate: D√©tails de l\'erreur:', JSON.stringify(error));
    }
    
    return NextResponse.json(
      {
        client_email: '',
        success: false,
        documents: {},
        error: errorMessage
      },
      { status: 500 }
    );
  }
}